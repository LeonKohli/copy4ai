name: Publish VS Code Extension

on:
  push:
    tags:
      - "v*"

# Add permissions needed for release creation
permissions:
  contents: write

# Add concurrency control to prevent conflicts
concurrency: 
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      vsix_path: ${{ steps.package.outputs.vsix_path }}
    steps:
      # Pin to specific SHA for security
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Add caching for faster builds
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Package Extension
        id: package
        run: |
          npx vsce package
          echo "vsix_path=$(ls *.vsix)" >> $GITHUB_OUTPUT

      - name: Validate VSIX
        run: |
          if [ ! -f "${{ steps.package.outputs.vsix_path }}" ]; then
            echo "VSIX file missing!"
            exit 1
          fi

      - name: Upload Extension Package
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: '*.vsix'
          retention-days: 1  # Only needed temporarily

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Publish to Open VSX Registry
        uses: HaaLeo/publish-vscode-extension@v2
        id: publishToOpenVSX
        with:
          pat: ${{ secrets.OPENVSX_TOKEN }}
          skipDuplicate: true

      - name: Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v2
        with:
          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
          extensionFile: ${{ steps.publishToOpenVSX.outputs.vsixPath }}
          skipDuplicate: true

  create-release:
    needs: [build, publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Package Extension for Release
        id: package_release
        run: |
          npx vsce package
          echo "vsix_path=$(ls *.vsix)" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the tag message
          TAG_MSG=$(git tag -l --format='%(contents)' ${GITHUB_REF#refs/tags/})
          
          # Validate tag message
          if [ -z "$TAG_MSG" ]; then
            echo "Warning: Tag message is empty. Using default message."
            TAG_MSG="Release ${GITHUB_REF#refs/tags/}"
          fi
          
          # Get commits since last release (excluding merges)
          PREV_TAG=$(git describe --tags --abbrev=0 ${GITHUB_REF#refs/tags/}^ 2>/dev/null || echo '')
          if [ -n "$PREV_TAG" ]; then
            CHANGES=$(git log --no-merges --pretty=format:"- %s (%h)" ${PREV_TAG}..${GITHUB_REF#refs/tags/})
          else
            CHANGES=$(git log --no-merges --pretty=format:"- %s (%h)" ${GITHUB_REF#refs/tags/})
          fi
          
          # Create release notes
          {
            echo "### Release Notes"
            echo
            echo "$TAG_MSG"
            echo
            echo "### Changes"
            echo "$CHANGES"
          } > release_notes.md
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Copy4AI ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: ${{ steps.package_release.outputs.vsix_path }}
          
